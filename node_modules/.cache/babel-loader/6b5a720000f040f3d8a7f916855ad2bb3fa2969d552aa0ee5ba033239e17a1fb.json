{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      pets: [],\n      currentPage: 1,\n      pageSize: 10,\n      backendUrl: 'http://localhost:3000'\n    };\n  },\n  computed: {\n    paginatedPets() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.pets.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.pets.length / this.pageSize);\n    }\n  },\n  async created() {\n    await this.fetchPets();\n  },\n  methods: {\n    async fetchPets() {\n      try {\n        const response = await fetch(`${this.backendUrl}/api/pets`, {\n          method: 'GET',\n          credentials: 'include' // Отправляем куки с токеном\n        });\n        if (!response.ok) {\n          const text = await response.text(); // Проверяем, что возвращает сервер\n          console.error('Server response:', text);\n          if (response.status === 401) {\n            this.$router.push('/login'); // Перенаправляем на логин при отсутствии авторизации\n            return;\n          }\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Fetched pets:', data);\n        this.pets = data.pets || []; // Учитываем структуру ответа { pets, totalPages, currentPage }\n      } catch (err) {\n        console.error('Error fetching pets:', err);\n        this.pets = []; // Сбрасываем список в случае ошибки\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    viewPet(petId) {\n      console.log('Navigating to pet ID:', petId);\n      this.$router.push(`/view-pet/${petId}`);\n    }\n  }\n};","map":{"version":3,"names":["data","pets","currentPage","pageSize","backendUrl","computed","paginatedPets","start","end","slice","totalPages","Math","ceil","length","created","fetchPets","methods","response","fetch","method","credentials","ok","text","console","error","status","$router","push","Error","json","log","err","prevPage","nextPage","viewPet","petId"],"sources":["/home/vas/zoo/vueapp/src/components/PetList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"container\" style=\"display: inline-block;\">Питомцы</h1>\n    <div class=\"app-container\">\n      <h1 class=\"page-title\">Список питомцев</h1>\n      <div class=\"table-container\">\n        <table class=\"styled-table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Имя</th>\n              <th>Вид</th>\n              <th>Возраст</th>\n              <th>Пол</th>\n              <th>Цена (₽)</th>\n              <th>Доступен</th>\n              <th>Изображение</th>\n              <th class=\"actions-column\">Действия</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(pet, index) in paginatedPets\" :key=\"pet.id\" class=\"table-row\">\n              <td>{{ (currentPage - 1) * pageSize + index + 1 }}</td>\n              <td>{{ pet.name }}</td>\n              <td>{{ pet.species }}</td>\n              <td>{{ pet.age }}</td>\n              <td>{{ pet.gender }}</td>\n              <td>{{ pet.price }} ₽</td>\n              <td>\n                <span :class=\"['status', pet.available ? 'available' : 'unavailable']\">\n                  {{ pet.available ? 'Да' : 'Нет' }}\n                </span>\n              </td>\n              <td>\n                <img v-if=\"pet.img\"\n                     :src=\"`${backendUrl}${pet.img}`\"\n                     alt=\"Pet Image\"\n                     class=\"pet-image\" />\n                <span v-else>N/A</span>\n              </td>\n              <td class=\"actions-column\">\n                <div class=\"action-button-container\" @click=\"viewPet(pet.id)\">\n                  <i class=\"fas fa-eye\"></i>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <p v-if=\"!paginatedPets.length\" class=\"no-pets-message\">Нет доступных питомцев.</p>\n        <div class=\"pagination\" v-if=\"totalPages > 1\">\n          <button @click=\"prevPage\" :disabled=\"currentPage === 1\">← Предыдущая</button>\n          <span>Страница {{ currentPage }} из {{ totalPages }}</span>\n          <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Следующая →</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pets: [],\n      currentPage: 1,\n      pageSize: 10,\n      backendUrl: 'http://localhost:3000',\n    };\n  },\n  computed: {\n    paginatedPets() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.pets.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.pets.length / this.pageSize);\n    },\n  },\n  async created() {\n    await this.fetchPets();\n  },\n  methods: {\n    async fetchPets() {\n      try {\n        const response = await fetch(`${this.backendUrl}/api/pets`, {\n          method: 'GET',\n          credentials: 'include', // Отправляем куки с токеном\n        });\n        if (!response.ok) {\n          const text = await response.text(); // Проверяем, что возвращает сервер\n          console.error('Server response:', text);\n          if (response.status === 401) {\n            this.$router.push('/login'); // Перенаправляем на логин при отсутствии авторизации\n            return;\n          }\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Fetched pets:', data);\n        this.pets = data.pets || []; // Учитываем структуру ответа { pets, totalPages, currentPage }\n      } catch (err) {\n        console.error('Error fetching pets:', err);\n        this.pets = []; // Сбрасываем список в случае ошибки\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    viewPet(petId) {\n      console.log('Navigating to pet ID:', petId);\n      this.$router.push(`/view-pet/${petId}`);\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Стили остаются без изменений */\n</style>"],"mappings":";AA4DA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,MAAMC,KAAI,GAAI,CAAC,IAAI,CAACL,WAAU,GAAI,CAAC,IAAI,IAAI,CAACC,QAAQ;MACpD,MAAMK,GAAE,GAAID,KAAI,GAAI,IAAI,CAACJ,QAAQ;MACjC,OAAO,IAAI,CAACF,IAAI,CAACQ,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;IACpC,CAAC;IACDE,UAAUA,CAAA,EAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACX,IAAI,CAACY,MAAK,GAAI,IAAI,CAACV,QAAQ,CAAC;IACpD;EACF,CAAC;EACD,MAAMW,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACd,UAAU,WAAW,EAAE;UAC1De,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE,SAAS,CAAE;QAC1B,CAAC,CAAC;QACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAMC,IAAG,GAAI,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC,EAAE;UACpCC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,IAAI,CAAC;UACvC,IAAIL,QAAQ,CAACQ,MAAK,KAAM,GAAG,EAAE;YAC3B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC7B;UACF;UACA,MAAM,IAAIC,KAAK,CAAC,uBAAuBX,QAAQ,CAACQ,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMzB,IAAG,GAAI,MAAMiB,QAAQ,CAACY,IAAI,CAAC,CAAC;QAClCN,OAAO,CAACO,GAAG,CAAC,eAAe,EAAE9B,IAAI,CAAC;QAClC,IAAI,CAACC,IAAG,GAAID,IAAI,CAACC,IAAG,IAAK,EAAE,EAAE;MAC/B,EAAE,OAAO8B,GAAG,EAAE;QACZR,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEO,GAAG,CAAC;QAC1C,IAAI,CAAC9B,IAAG,GAAI,EAAE,EAAE;MAClB;IACF,CAAC;IACD+B,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAAC9B,WAAU,GAAI,CAAC,EAAE;QACxB,IAAI,CAACA,WAAW,EAAE;MACpB;IACF,CAAC;IACD+B,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAAC/B,WAAU,GAAI,IAAI,CAACQ,UAAU,EAAE;QACtC,IAAI,CAACR,WAAW,EAAE;MACpB;IACF,CAAC;IACDgC,OAAOA,CAACC,KAAK,EAAE;MACbZ,OAAO,CAACO,GAAG,CAAC,uBAAuB,EAAEK,KAAK,CAAC;MAC3C,IAAI,CAACT,OAAO,CAACC,IAAI,CAAC,aAAaQ,KAAK,EAAE,CAAC;IACzC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}