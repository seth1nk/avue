{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      error: ''\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        console.log('Logging in with data:', {\n          email: this.email,\n          password: this.password\n        });\n        const response = await fetch('http://localhost:3000/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.email,\n            password: this.password\n          })\n        });\n        const data = await response.json();\n        console.log('Login response:', data);\n        if (response.ok) {\n          // Сохраняем токен в localStorage\n          localStorage.setItem('token', data.token);\n\n          // Сначала перенаправляем на главную страницу\n          this.$router.push('/');\n\n          // Затем через небольшую задержку обновляем страницу\n          setTimeout(() => {\n            location.reload(); // Полная перезагрузка страницы\n          }, 500); // Задержка в 500 миллисекунд\n        } else {\n          this.error = data.message || 'Ошибка входа';\n        }\n      } catch (err) {\n        console.error('Error during login:', err);\n        this.error = 'Ошибка сервера';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","email","password","error","methods","login","console","log","response","fetch","method","headers","body","JSON","stringify","json","ok","localStorage","setItem","token","$router","push","setTimeout","location","reload","message","err"],"sources":["/home/vas/server/vueapp/src/components/Login.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h2>Вход</h2>\n    <form @submit.prevent=\"login\">\n      <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"email\" required class=\"form-input\" />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Пароль:</label>\n        <input type=\"password\" id=\"password\" v-model=\"password\" required class=\"form-input\" />\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary\">Войти</button>\n      <p v-if=\"error\" class=\"error\">{{ error }}</p>\n    </form>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        email: '',\n        password: '',\n        error: '',\n      };\n    },\n    methods: {\n      async login() {\n        try {\n          console.log('Logging in with data:', {\n            email: this.email,\n            password: this.password,\n          });\n          const response = await fetch('http://localhost:3000/auth/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              email: this.email,\n              password: this.password,\n            }),\n          });\n          const data = await response.json();\n          console.log('Login response:', data);\n\n          if (response.ok) {\n            // Сохраняем токен в localStorage\n            localStorage.setItem('token', data.token);\n\n            // Сначала перенаправляем на главную страницу\n            this.$router.push('/');\n\n            // Затем через небольшую задержку обновляем страницу\n            setTimeout(() => {\n              location.reload(); // Полная перезагрузка страницы\n            }, 500); // Задержка в 500 миллисекунд\n          } else {\n            this.error = data.message || 'Ошибка входа';\n          }\n        } catch (err) {\n          console.error('Error during login:', err);\n          this.error = 'Ошибка сервера';\n        }\n      },\n    },\n  };\n</script>\n\n<style scoped>\n  .container {\n    width: 100%; /* Ширина контейнера */\n    max-width: 400px; /* Максимальная ширина */\n    margin: 0 auto; /* Выравнивание по центру по горизонтали */\n    padding: 20px; /* Отступы внутри контейнера */\n    text-align: center; /* Выравнивание текста по центру */\n    position: absolute; /* Абсолютное позиционирование */\n    top: 50%; /* Сдвигаем контейнер на 50% от верха */\n    left: 50%; /* Сдвигаем контейнер на 50% от левого края */\n    transform: translate(-50%, -50%); /* Смещение контейнера на половину его ширины и высоты */\n  }\n\n  .error {\n    color: red;\n    margin-top: 10px;\n  }\n</style>\n"],"mappings":";AAmBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;UACnCN,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC;QACF,MAAMM,QAAO,GAAI,MAAMC,KAAK,CAAC,kCAAkC,EAAE;UAC/DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBb,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBC,QAAQ,EAAE,IAAI,CAACA;UACjB,CAAC;QACH,CAAC,CAAC;QACF,MAAMF,IAAG,GAAI,MAAMQ,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCT,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEP,IAAI,CAAC;QAEpC,IAAIQ,QAAQ,CAACQ,EAAE,EAAE;UACf;UACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAElB,IAAI,CAACmB,KAAK,CAAC;;UAEzC;UACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;;UAEtB;UACAC,UAAU,CAAC,MAAM;YACfC,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;UACrB,CAAC,EAAE,GAAG,CAAC,EAAE;QACX,OAAO;UACL,IAAI,CAACrB,KAAI,GAAIH,IAAI,CAACyB,OAAM,IAAK,cAAc;QAC7C;MACF,EAAE,OAAOC,GAAG,EAAE;QACZpB,OAAO,CAACH,KAAK,CAAC,qBAAqB,EAAEuB,GAAG,CAAC;QACzC,IAAI,CAACvB,KAAI,GAAI,gBAAgB;MAC/B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}